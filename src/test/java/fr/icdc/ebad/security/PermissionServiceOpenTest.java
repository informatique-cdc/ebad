package fr.icdc.ebad.security;

import fr.icdc.ebad.domain.GlobalSetting;
import fr.icdc.ebad.service.GlobalSettingService;
import fr.icdc.ebad.service.util.EbadServiceException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.core.env.Environment;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class PermissionServiceOpenTest {
    @Mock
    private GlobalSettingService globalSettingService;

    @Mock
    private Environment environment;

    @InjectMocks
    private PermissionServiceOpen permissionServiceOpen;

    @Test
    public void canImportEnvironment() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("ENVIRONMENT_IMPORT_ENABLED", "true", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("ENVIRONMENT_IMPORT_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canImportEnvironment();
        assertTrue(result);
    }

    @Test
    public void cantImportEnvironment() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("ENVIRONMENT_IMPORT_ENABLED", "false", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("ENVIRONMENT_IMPORT_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canImportEnvironment();
        assertFalse(result);
    }

    @Test
    public void cantImportEnvironmentBadValue() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("ENVIRONMENT_IMPORT_ENABLED", "sdf", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("ENVIRONMENT_IMPORT_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canImportEnvironment();
        assertFalse(result);
    }


    @Test
    public void cantImportEnvironmentNoGlobalSettings() throws EbadServiceException {
        when(globalSettingService.getValue("ENVIRONMENT_IMPORT_ENABLED")).thenThrow(EbadServiceException.class);
        boolean result = permissionServiceOpen.canImportEnvironment();
        assertFalse(result);
    }


    @Test
    public void canImportApplication() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("APPLICATION_IMPORT_ENABLED", "true", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("APPLICATION_IMPORT_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canImportApplication();
        assertTrue(result);
    }

    @Test
    public void cantImportApplication() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("APPLICATION_IMPORT_ENABLED", "false", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("APPLICATION_IMPORT_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canImportApplication();
        assertFalse(result);
    }

    @Test
    public void cantImportApplicationBadValue() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("APPLICATION_IMPORT_ENABLED", "sdf", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("APPLICATION_IMPORT_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canImportApplication();
        assertFalse(result);
    }


    @Test
    public void cantImportApplicationNoGlobalSettings() throws EbadServiceException {
        when(globalSettingService.getValue("APPLICATION_IMPORT_ENABLED")).thenThrow(EbadServiceException.class);
        boolean result = permissionServiceOpen.canImportApplication();
        assertFalse(result);
    }


    @Test
    public void canCreateApplication() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("APPLICATION_CREATE_ENABLED", "false", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("APPLICATION_CREATE_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canCreateApplication();
        assertFalse(result);
    }

    @Test
    public void cantCreateApplicationBadValue() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("APPLICATION_CREATE_ENABLED", "sdf", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("APPLICATION_CREATE_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canCreateApplication();
        assertFalse(result);
    }


    @Test
    public void cantCreateApplicationNoGlobalSettings() throws EbadServiceException {
        when(globalSettingService.getValue("APPLICATION_CREATE_ENABLED")).thenThrow(EbadServiceException.class);
        boolean result = permissionServiceOpen.canCreateApplication();
        assertFalse(result);
    }

    @Test
    public void canCreateEnvironment() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("ENVIRONMENT_CREATE_ENABLED", "false", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("ENVIRONMENT_CREATE_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canCreateEnvironment();
        assertFalse(result);
    }

    @Test
    public void cantCreateEnvironmentBadValue() throws EbadServiceException {
        GlobalSetting globalSettingSaved = new GlobalSetting("ENVIRONMENT_CREATE_ENABLED", "sdf", "TEST_LABEL", "TEST_DESCRIPTION");
        when(globalSettingService.getValue("ENVIRONMENT_CREATE_ENABLED")).thenReturn(globalSettingSaved);
        boolean result = permissionServiceOpen.canCreateEnvironment();
        assertFalse(result);
    }


    @Test
    public void cantCreateEnvironmentNoGlobalSettings() throws EbadServiceException {
        when(globalSettingService.getValue("ENVIRONMENT_CREATE_ENABLED")).thenThrow(EbadServiceException.class);
        boolean result = permissionServiceOpen.canCreateEnvironment();
        assertFalse(result);
    }


    @Test
    public void cantCreateOrUpdateUser() {
        String[] profiles = {"prod"};
        when(environment.getActiveProfiles()).thenReturn(profiles);
        boolean result = permissionServiceOpen.canCreateOrUpdateUser();
        assertFalse(result);
    }

    @Test
    public void canCreateOrUpdateUser() {
        String[] profiles = {"prod", "jwt"};
        when(environment.getActiveProfiles()).thenReturn(profiles);
        boolean result = permissionServiceOpen.canCreateOrUpdateUser();
        assertTrue(result);
    }
}
